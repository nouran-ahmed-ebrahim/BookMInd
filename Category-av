<!DOCTYPE html>
<html>
<!-- non framed -->
<head>
<title>Category Report</title>
<link href="/images/css/screen.css" rel="stylesheet" media="screen">
<link href="/images/css/print.css" rel="stylesheet" media="print">
~[wc:commonscripts]
</head>
<body>
~[wc:admin_header_css]
<!-- breadcrumb start -->
<a href="/admin/home.html" target="_top">Start Page</a> &gt; <a href="/admin/ui_examples/home.html" target="_top">UI Examples</a> &gt; Admin Pages
<!-- breadcrumb end -->

~[wc:admin_navigation_css]

     <div data-pss-relink>
         <h2>Category Report</h2>
         
         <br>
         <!-- start of content and bounding box -->
         <div class="dropdown-container col-md-14" id="Filters">
             <div class="dropdown-wrapper">
                 <label for="SchoolsDropDown">Schools:</label>
                 <select name="schools" id="SchoolsDropDown" class="form-select form-value"></select>
             </div>
         
             <div class="dropdown-wrapper">
                 <label for="YearsDropDown">Years: <i class="bi bi-asterisk" style="color: red;"></i></label>
                 <select name="years" id="YearsDropDown" class="form-select form-value"></select>
                 
             </div>
             <div class="dropdown-wrapper">
                 <label for="TermsDropDown">Terms: <i class="bi bi-asterisk" style="color: red;"></i></label>
                 <select name="terms" id="TermsDropDown" class="form-select form-value"></select>
             </div>
         
             <div class="dropdown-wrapper">
                 <label for="CoursesDropDown">Courses: <i class="bi bi-asterisk" style="color: red;"></i></label>
                 <select name="Courses" id="CoursesDropDown" class="form-select form-value"></select>
             </div>
 
             <div class="dropdown-wrapper">
                 <label for="SectionsDropDown">Classes: <i class="bi bi-asterisk" style="color: red;"></i></label>
                 <select name="Sections" id="SectionsDropDown" class="form-select form-value"></select>
             </div>
 
             <div class="dropdown-wrapper" style="margin-right: 0;">
                 <label for="CategoriesDropDown">Categories: <i class="bi bi-asterisk" style="color: red;"></i></label>
                 <select name="Categories" id="CategoriesDropDown" class="form-select form-value"></select>
             </div>
         </div>      
         <div class="col-md-12" id="actions">
             <button class="btn" id="Reportbtn" onclick="generateReport()">Report</button>
             <button class="btn" onclick="PrintAvg()">Print</button>
         </div>
         <div id="AvarageData">
             <div id="CatigoryAvarage">
                 <label>Avarage: <span id="avarage"></span></label>
             </div>
            <div id="table-container" class="col-md-12">
            </div>
         </div>
     </div>  

 
 <script>
     jQuery(document).ready(function(){
         schools();
     });
 
     function schools(){
         const url = 'https://edupro.powerschool.com/ws/schema/query/com.elite.Teacher.get_schools';
         
         jQuery.ajax({
                 url: url, // Update with your controller and action
                 type: 'POST',
                 headers: {
                     'Accept': 'application/json',
                     'Content-Type': 'application/json',
                     //'Authorization': 'Bearer 2cb759c5-6192-4319-889d-2ee638c8a971'          
                 },
 
                 success: function (data) {
                     populateschoolsDropDown(data);
                 },
                 error: function (error) {
                 }
             });
     }
 
     // Function to populate the dropdown menu
     function populateschoolsDropDown(data) {
         // Assuming you have a reference to your dropdown menu in the DOM
         const schoolsDropDown = document.getElementById('SchoolsDropDown');
         const records = data.record; // Get the record array from the JSON data
         
         // clear schoolsDropDown
         jQuery('#SchoolsDropDown').empty();
 
         // add default option
         const defaultOption = `<option value=0 disabled>--Select School--</option>`;
         schoolsDropDown.append(defaultOption);
 
         // Iterate through each record in the array
         records.forEach((school) => {
             // Create an option element for each school
             const option = document.createElement('option');
             option.value = school.school_number; // Set the value of the option
             option.text = school.school_abbrev; // Set the text of the option
 
             // Append the option to the dropdown menu
             schoolsDropDown.appendChild(option);
         });
         years();
     }
 
     jQuery('#SchoolsDropDown').change(function () {
         years();
     });
 
     function years(){
         const url = 'https://edupro.powerschool.com/ws/schema/query/com.elite.Teacher.get_school_years';
         const schoolId = jQuery('#SchoolsDropDown').val();
 
         // Make an AJAX request to the specified URL
         jQuery.ajax({
             url: url, // The URL for the request
             type: 'POST', // Use the POST method for the request
             headers: {
                 'Accept': 'application/json', // Expect JSON response
                 'Content-Type': 'application/json', // Send JSON data
                 //'Authorization': 'Bearer 2cb759c5-6192-4319-889d-2ee638c8a971'          
             },
             data: JSON.stringify({ schoolId: schoolId }), // Send schoolId as JSON data
             success: function (data) {
                 populateYearsDropDown(data); // Call the function to populate the dropdown with data
             },
             error: function (error) {
                 console.error('Error:', error); // Log any error that occurs
             }
         });
     }
 
     // Function to populate the dropdown menu
     function populateYearsDropDown(data) {
         // Assuming you have a reference to your dropdown menu in the DOM
         const YearsDropDown = document.getElementById('YearsDropDown');
         const records = data.record; // Get the record array from the JSON data
         
         // clear YearsDropDown
         jQuery('#YearsDropDown').empty();
         
         // add default option
         const defaultOption = `<option value=0 disabled>--Select Year--</option>`;
         YearsDropDown.append(defaultOption);
 
         // Iterate through each record in the array
         records.forEach((year) => {
             // Create an option element for each school
             const option = document.createElement('option');
             option.value = year.yearid; // Set the value of the option
             option.text = `${parseInt(year.yearid) + 1990} - ${parseInt(year.yearid) + 1991}` ; // Set the text of the option
 
             // Append the option to the dropdown menu
             YearsDropDown.appendChild(option);
         });
         terms();
     }
 
     jQuery('#YearsDropDown').change(function () {
        terms();
     });
 
     function terms(){
         const url = 'https://edupro.powerschool.com/ws/schema/query/com.elite.Teacher.get_school_year_terms';
         const schoolId = jQuery('#SchoolsDropDown').val();
         const yearId = jQuery('#YearsDropDown').val();
         
         // Make an AJAX request to the specified URL
         jQuery.ajax({
             url: url, // The URL for the request
             type: 'POST', // Use the POST method for the request
             headers: {
                 'Accept': 'application/json', // Expect JSON response
                 'Content-Type': 'application/json', // Send JSON data
                 //'Authorization': 'Bearer 2cb759c5-6192-4319-889d-2ee638c8a971'          
             },
             data: JSON.stringify({ schoolId: schoolId, yearId: yearId}), // Send schoolId as JSON data
             success: function (data) {
                 populateTermsDropDown(data); // Call the function to populate the dropdown with data
             },
             error: function (error) {
                 console.error('Error:', error); // Log any error that occurs
             }
 
         });
     }
 
     // Function to populate terms the dropdown menu
     function populateTermsDropDown(data) {
         // Assuming you have a reference to your dropdown menu in the DOM
         const TermsDropDown = document.getElementById('TermsDropDown');
         const records = data.record; // Get the record array from the JSON data
         
         // clear TermsDropDown
         jQuery('#TermsDropDown').empty();
         
         // add default option
         const defaultOption = `<option value=0 disabled>--Select Term--</option>`;
         TermsDropDown.append(defaultOption);
 
         // Iterate through each record in the array
         records.forEach((term) => {
             // Create an option element for each school
             const option = document.createElement('option');
             option.value = term.id; // Set the value of the option
             option.text = term.abbreviation; // Set the text of the option
 
             // Append the option to the dropdown menu
             TermsDropDown.appendChild(option);
         });
         courses();
     }
 
     jQuery('#TermsDropDown').change(function () {
         courses();
     });
     
     function NumberOfTermCourses(schoolId, termId) {
     const url = 'https://edupro.powerschool.com/ws/schema/query/com.elite.Teacher.get_school_term_courses/count';
     
     return new Promise((resolve, reject) => {
         // Make an AJAX request to the specified URL
         jQuery.ajax({
             url: url, // The URL for the request
             type: 'POST', // Use the POST method for the request
             headers: {
                 'Accept': 'application/json', // Expect JSON response
                 'Content-Type': 'application/json', // Send JSON data
                // 'Authorization': 'Bearer 2cb759c5-6192-4319-889d-2ee638c8a971'          
             },
             data: JSON.stringify({ schoolId: schoolId, termId: termId}), // Send schoolId and termId as JSON data
             success: function(data) {
                 resolve(data.count);
             },
             error: function(error) {
                 reject(0); // Return 0 if an error occurs
             }
         });
     });
 }
 
     async function courses() {
         const url = 'https://edupro.powerschool.com/ws/schema/query/com.elite.Teacher.get_school_term_courses?pagesize=100&';
         const schoolId = jQuery('#SchoolsDropDown').val();
         const termId = jQuery('#TermsDropDown').val().slice(0, -2) + "00";
 
         // clear CoursesDropDown
         const coursesDropdown = jQuery('#CoursesDropDown');
         coursesDropdown.empty(); // Clear existing options
 
         // Get the number of term courses using the NumberOfTermCourses function and await the promise
         const numberOfTermCourses = await NumberOfTermCourses(schoolId, termId);
 
         // Array to store concatenated results
         let concatenatedResults = [];
         
         // Loop to make AJAX requests for each page of data
         for (let index = 1, currentCoursesNumber = 0; currentCoursesNumber < numberOfTermCourses; index++, currentCoursesNumber += 100) {
             // Update URL with pagination parameter
             const pageUrl = url + `page=${index}`;
             
             // Make an AJAX request to the specified URL
             try {
                 const response = await jQuery.ajax({
                     url: pageUrl, // The URL for the request
                     type: 'POST', // Use the POST method for the request
                     headers: {
                         'Accept': 'application/json', // Expect JSON response
                         'Content-Type': 'application/json', // Send JSON data
                         //'Authorization': 'Bearer 2cb759c5-6192-4319-889d-2ee638c8a971'          
                     },
                     data: JSON.stringify({ schoolId: schoolId, termId: termId }) // Send schoolId and termId as JSON data
                 });
                 
                 // Add the records from the response to the concatenatedResults array
                 if (response && response.record) {
                     concatenatedResults.push(...response.record);
                 }
                 
                 // If this is the last page, populate the courses dropdown
                 if (currentCoursesNumber + 100 >= numberOfTermCourses) {
                     populatesCoursesDropDown(concatenatedResults);
                 }
                 
             } catch (error) {
                 console.error('Error:', error); // Log any error that occurs
             }
         }
     }
 
     function populatesCoursesDropDown(results) {
         // Process concatenated results as needed
         // For example, you can populate a dropdown with course names and numbers
         
         const coursesDropdown = jQuery('#CoursesDropDown');
         // Add a default option
         const defaultOption = `<option value="0" disabled>-- Select Course --</option>`;
         coursesDropdown.append(defaultOption);
 
         // Populate the dropdown with course names and numbers
         results.forEach(course => {
             const option = `<option value="${course.course_number}">
                                 ${course.course_name} (${course.course_number})
                             </option>`;
             coursesDropdown.append(option);
         });
         sections();
     }
 
     jQuery('#CoursesDropDown').change(function () {
         sections();
     });
     
     function NumberOfCourseSections(schoolId, termId, course_number) {
         const url = 'https://edupro.powerschool.com/ws/schema/query/com.elite.Teacher.get_course_sections/count';
     
         return new Promise((resolve, reject) => {
             // Make an AJAX request to the specified URL
             jQuery.ajax({
                 url: url, // The URL for the request
                 type: 'POST', // Use the POST method for the request
                 headers: {
                     'Accept': 'application/json', // Expect JSON response
                     'Content-Type': 'application/json', // Send JSON data
                     //'Authorization': 'Bearer 2cb759c5-6192-4319-889d-2ee638c8a971'          
                 },
                 data: JSON.stringify({ schoolId: schoolId, termId: termId, courseNumber: course_number}), // Send schoolId and termId as JSON data
                 success: function(data) {
                     resolve(data.count);
                 },
                 error: function(error) {
                     reject(0); // Return 0 if an error occurs
                 }
             });
         });
     }
 
     async function sections() {
         const url = 'https://edupro.powerschool.com/ws/schema/query/com.elite.Teacher.get_course_sections?pagesize=100&';
         const schoolId = jQuery('#SchoolsDropDown').val();
         const termId = jQuery('#TermsDropDown').val().slice(0, -2) + "00";
         const course_number = jQuery('#CoursesDropDown').val();
 
         // Clear SectionsDropDown
         const sectionsDropdown = jQuery('#SectionsDropDown');
         sectionsDropdown.empty(); // Clear existing options
 
         // Get the number of term courses using the NumberOfTermCourses function and await the promise
         const numberOfCourseSections = await NumberOfCourseSections(schoolId, termId, course_number);
 
         // Array to store concatenated results
         let concatenatedResults = [];
         
         // Loop to make AJAX requests for each page of data
         for (let index = 1, currentSectionsNumber = 0; currentSectionsNumber < numberOfCourseSections; index++, currentSectionsNumber += 100) {
             // Update URL with pagination parameter
             const pageUrl = url + `page=${index}`;
             
             // Make an AJAX request to the specified URL
             try {
                 const response = await jQuery.ajax({
                     url: pageUrl, // The URL for the request
                     type: 'POST', // Use the POST method for the request
                     headers: {
                         'Accept': 'application/json', // Expect JSON response
                         'Content-Type': 'application/json', // Send JSON data
                         //'Authorization': 'Bearer 2cb759c5-6192-4319-889d-2ee638c8a971'          
                     },
                     data: JSON.stringify({ schoolId: schoolId, termId: termId, courseNumber: course_number }) // Send schoolId and termId as JSON data
                 });
                 
                 // Add the records from the response to the concatenatedResults array
                 if (response && response.record) {
                     concatenatedResults.push(...response.record);
                 }
                 
                 // If this is the last page, populate the sections dropdown
                 if (currentSectionsNumber + 100 >= numberOfCourseSections) {
                     populatesSectionsDropDown(concatenatedResults);
                 }
                 
             } catch (error) {
                 console.error('Error:', error); // Log any error that occurs
             }
         }
     }
 
     function populatesSectionsDropDown(results) {
         // Process concatenated results as needed
         // For example, you can populate a dropdown with course names and numbers
 
         const sectionsDropdown = jQuery('#SectionsDropDown');
 
         // Add a default option
         const defaultOption = `<option value="0" disabled>-- Select Class --</option>`;
         sectionsDropdown.append(defaultOption);
 
         // Populate the dropdown with course names and numbers
         results.forEach(section => {
             const option = `<option value="${section.dcid}">${section.section_number}</option>`;
             sectionsDropdown.append(option);
         });
 
         Categories();
     }
 
     jQuery('#SectionsDropDown').change(function () {
         Categories();
     });
     
     function NumberOfCategoriesSections(schoolId, termId, sectionsDcid) {
         const url = 'https://edupro.powerschool.com/ws/schema/query/com.elite.Teacher.get_teacher_category/count';
     
         return new Promise((resolve, reject) => {
             // Make an AJAX request to the specified URL
             jQuery.ajax({
                 url: url, // The URL for the request
                 type: 'POST', // Use the POST method for the request
                 headers: {
                     'Accept': 'application/json', // Expect JSON response
                     'Content-Type': 'application/json', // Send JSON data
                     //'Authorization': 'Bearer 2cb759c5-6192-4319-889d-2ee638c8a971'          
                 },
                 data: JSON.stringify({ schoolId: schoolId, termId: termId, sectionsDcid: sectionsDcid}), // Send schoolId and termId as JSON data
                 success: function(data) {
                     resolve(data.count);
                 },
                 error: function(error) {
                     reject(0); // Return 0 if an error occurs
                 }
             });
         });
     }
     
     async function Categories() {
         const url = 'https://edupro.powerschool.com/ws/schema/query/com.elite.Teacher.get_teacher_category?pagesize=100&';
         const schoolId = jQuery('#SchoolsDropDown').val();
         const termId = jQuery('#TermsDropDown').val();
         const sectionsDcid = jQuery('#SectionsDropDown').val();
 
         // Clear SectionsDropDown
         const CategoriesDropdown = jQuery('#CategoriesDropDown');
         CategoriesDropdown.empty(); // Clear existing options
 
         // Get the number of Categories using the NumberOfCategoriesSections function and await the promise
         const numberOfCategoriesSections = await NumberOfCategoriesSections(schoolId, termId, sectionsDcid);
 
         // Array to store concatenated results
         let concatenatedResults = [];
         
         // Loop to make AJAX requests for each page of data
         for (let index = 1, currentCategoriesNumber = 0; currentCategoriesNumber < numberOfCategoriesSections; index++, currentCategoriesNumber += 100) {
             // Update URL with pagination parameter
             const pageUrl = url + `page=${index}`;
             
             // Make an AJAX request to the specified URL
             try {
                 const response = await jQuery.ajax({
                     url: pageUrl, // The URL for the request
                     type: 'POST', // Use the POST method for the request
                     headers: {
                         'Accept': 'application/json', // Expect JSON response
                         'Content-Type': 'application/json', // Send JSON data
                         //'Authorization': 'Bearer 2cb759c5-6192-4319-889d-2ee638c8a971'          
                     },
                     data: JSON.stringify({ schoolId: schoolId, termId: termId, sectionsDcid: sectionsDcid }) // Send schoolId and termId as JSON data
                 });
                 
                 // Add the records from the response to the concatenatedResults array
                 if (response && response.record) {
                     concatenatedResults.push(...response.record);
                 }
                 
                 // If this is the last page, populate the sections dropdown
                 if (currentCategoriesNumber + 100 >= numberOfCategoriesSections) {
                     populatesCategoriesDropDown(concatenatedResults);
                 }
                 
             } catch (error) {
                 console.error('Error:', error); // Log any error that occurs
             }
         }
     }
 
     function populatesCategoriesDropDown(results) {
         // Process concatenated results as needed
         // For example, you can populate a dropdown with course names and numbers
 
         const CategoriesDropdown = jQuery('#CategoriesDropDown');
 
         // Add a default option
         const defaultOption = `<option value="0" disabled>-- Select Category --</option>`;
         CategoriesDropdown.append(defaultOption);
 
         // Populate the dropdown with course names and numbers
         results.forEach(category => {
             const option = `<option value="${category.teachercategoryid}">${category.name}</option>`;
             CategoriesDropdown.append(option);
         });
     }
 </script>
 <script>
     function NumberOfStudents(schoolId, termId, sectionsDcid, teacherCategoryId) {
         const url = 'https://edupro.powerschool.com/ws/schema/query/com.elite.Teacher.get_students_scores_per_category_Section_term/count';
      
         return new Promise((resolve, reject) => {
             // Make an AJAX request to the specified URL
             jQuery.ajax({
                 url: url, // The URL for the request
                 type: 'POST', // Use the POST method for the request
                 headers: {
                     'Accept': 'application/json', // Expect JSON response
                     'Content-Type': 'application/json', // Send JSON data
                    // 'Authorization': 'Bearer 2cb759c5-6192-4319-889d-2ee638c8a971'          
                 },
                 data: JSON.stringify({ schoolId: schoolId, termId: termId, sectionsDcid: sectionsDcid, teacherCategoryId:teacherCategoryId}), // Send schoolId and termId as JSON data
                 success: function(data) {
                     resolve(data.count);
                 },
                 error: function(error) {
                     reject(0); // Return 0 if an error occurs
                 }
             });
         });
     }
 
     async function Students() {
         const url = 'https://edupro.powerschool.com/ws/schema/query/com.elite.Teacher.get_students_scores_per_category_Section_term?pagesize=100&';
         const schoolId = jQuery('#SchoolsDropDown').val();
         const termId = jQuery('#TermsDropDown').val();
         const sectionsDcid = jQuery('#SectionsDropDown').val();
         const teacherCategoryId = jQuery('#CategoriesDropDown').val();
 
         // Get the number of students using the NumberOfCategoriesSections function and await the promise
         const numberOfstudents = await NumberOfStudents(schoolId, termId, sectionsDcid, teacherCategoryId);
 
         // Array to store concatenated results
         let concatenatedResults = [];
         
         // Loop to make AJAX requests for each page of data
         for (let index = 1, currentnumberOfstudents = 0; currentnumberOfstudents < numberOfstudents; index++, currentnumberOfstudents += 100) {
             // Update URL with pagination parameter
             const pageUrl = url + `page=${index}`;
             
             // Make an AJAX request to the specified URL
             try {
                 const response = await jQuery.ajax({
                     url: pageUrl, // The URL for the request
                     type: 'POST', // Use the POST method for the request
                     crossDomain: true, // Set crossDomain to true for cross-origin requests
                     xhrFields: {
                         withCredentials: true // Enable sending CORS cookies with the request
                     },
                     headers: {
                         'Accept': 'application/json', // Expect JSON response
                         'Content-Type': 'application/json', // Send JSON data
                         // 'Authorization': 'Bearer 2cb759c5-6192-4319-889d-2ee638c8a971'          
                     },
                     data: JSON.stringify({ schoolId: schoolId, termId: termId, sectionsDcid: sectionsDcid, teacherCategoryId: teacherCategoryId }) // Send schoolId and termId as JSON data
                 });
                 
                 // Add the records from the response to the concatenatedResults array
                 if (response && response.record) {
                     concatenatedResults.push(...response.record);
                 }
                 
                 // If this is the last page, populate the sections dropdown
                 if (currentnumberOfstudents + 100 >= numberOfstudents) {
                     return(concatenatedResults);
                 }
                 
             } catch (error) {
                 console.error('Error:', error); // Log any error that occurs
             }
         }
     }
 
      async function generateReport(){
         //check that the data exist
         var IsAllParametersSelected = checkAllParametersSelected();
         if(IsAllParametersSelected){
             // Get student data
             var data = await Students();
             //  Fill table
             fillTableFromJson(data);
             //  Calc AVG
             CalcStudentsAvg();
             
         }
         else{
             fireAlert("Please select all required filters");
         }
     }
 
     function fireAlert(message){
         Swal.fire({
             icon: "error",
             title: "Oops...",
             text: message
         });
     }
 
     function checkAllParametersSelected(){
         const schoolId = jQuery('#SchoolsDropDown').val();
         const termId = jQuery('#TermsDropDown').val().slice(0, -2) + "00";
         const sectionsDcid = jQuery('#SectionsDropDown').val();
         const teacherCategoryId = jQuery('#CategoriesDropDown').val();
 
         if(schoolId && termId && sectionsDcid && teacherCategoryId){
             return true;
         }
         else{
             return false
         }
     }
     
     function fillTableFromJson(records) {

        // Process data to group scores by student
        const studentScores = {};
        records.forEach(entry => {
            const { student_number, student_name, score, total } = entry;
            if (!studentScores[student_number]) {
                studentScores[student_number] = {
                    FULL_NAME: student_name,
                    SCORES: [],
                    TOTALScore: 0.0,
                    FullMark: 0.0
                };
            }
            studentScores[student_number].SCORES.push(score);
            var current_score = parseFloat(score); 
            if (! isNaN(current_score)) {
                studentScores[student_number].TOTALScore += current_score;
            }
            
            var current_FullMark = parseFloat(total); 
            if (! isNaN(current_score)) {
                studentScores[student_number].FullMark += current_FullMark;
            }
        });

        // Determine the maximum number of exams
        const maxExams = Math.max(...Object.values(studentScores).map(student => student.SCORES.length));

        // Create the table headers
        let tableHTML = `<table class="table table-striped gridTable scrollable shrink student-name-large display-grade-value display-percent-value
         course-grade-column-count-2 display-grade-value-responsive display-percent-value-responsive course-grade-column-responsive-count-2" 
         data-exportname="Applications" style="width:100%" id="ReportTable">

            <thead style="font-size: 1.3rem;">
                <tr>
                    <th class="centered-cell">STUDENT NUMBER</th>
                    <th class="centered-cell">FULL NAME</th>`;
        for (let i = 1; i <= maxExams; i++) {
            tableHTML += `<th class="centered-cell">Assignment ${i}</th>`;
        }
        tableHTML += `<th class="centered-cell">TOTAL POINT</th>
                      <th class="centered-cell">Percentage</th>
                    </tr></thead><tbody  style="font-size: 1.2rem;">`;

        // Create the table rows
        for (const [studentNumber, student] of Object.entries(studentScores)) {
            tableHTML += `<tr>
                <td class="centered-cell">${studentNumber}</td>
                <td class="centered-cell">${student.FULL_NAME}</td>`;
            student.SCORES.forEach(score => {
                tableHTML += `<td class="centered-cell">${score}</td>`;
            });
            // Fill in empty exam scores if any
            for (let i = student.SCORES.length; i < maxExams; i++) {
                tableHTML += `<td></td>`;
            }
            tableHTML += `<td class="centered-cell">${student.TOTALScore} / ${student.FullMark}</td>`;
            tableHTML += `<td class="centered-cell">${parseFloat(((student.TOTALScore / student.FullMark)* 100).toFixed(2)) } %</td></tr>`;
        }
        tableHTML += `</tbody></table>`;

        // Display the table in the HTML document
        document.getElementById('table-container').innerHTML = tableHTML;
   }
 
    function CalcStudentsAvg() {
        // Get the table and tbody elements
        const table = document.getElementById('ReportTable');
        const tbody = table.querySelector('tbody');

        // Initialize sum and row count
        let totalSum = 0;
        let rowCount = 0;

        // Loop through each row in the tbody
        tbody.querySelectorAll('tr').forEach(row => {
            // Get the cells in the row
            const cells = row.querySelectorAll('td');

            // Get the last cell (total point)
            const lastCell = cells[cells.length - 1];

            // Add the value of the last cell to the total sum
            totalSum += parseFloat(lastCell.innerText);

            // Increment the row count
            rowCount++;
        });
         // Calculate the average by dividing the sum by the number of elements
         const average = totalSum / rowCount;
 
         // Round to four decimal points
         const roundedAverage = average.toFixed(2);
 
         // Add percentage sign
         const formattedAverage = roundedAverage + '%';
 
         document.getElementById('avarage').innerText = formattedAverage;
     }
 </script>
 
 <script>
     function PrintAvg() {
         function extractCSSRules(styleSheet) {
             const cssRules = [];
 
             try {
                 // Handle different types of CSSStyleSheet
                 const rules = styleSheet.cssRules || styleSheet.rules;
 
                 // Iterate through each CSS rule
                 for (let i = 0; i < rules.length; i++) {
                     const rule = rules[i];
 
                     // Push the CSS rule's CSS text to the array
                     cssRules.push(rule.cssText);
                 }
             } catch (error) {
                 console.error('Error extracting CSS rules:', error);
             }
 
             return cssRules.join('\n'); // Join rules into a single CSS string
         }
 
         // Function to extract all CSS rules from all stylesheets
         function extractAllCSSRules() {
             const allCSSRules = [];
 
             // Iterate through each stylesheet in the document
             for (let i = 0; i < document.styleSheets.length; i++) {
                 const styleSheet = document.styleSheets[i];
 
                 // Extract CSS rules from the stylesheet
                 const cssRules = extractCSSRules(styleSheet);
 
                 // Push extracted CSS rules to the array
                 allCSSRules.push(cssRules);
             }
 
             return allCSSRules.join('\n'); // Join all stylesheet rules into a single CSS string
         }
 
         // Retrieve all CSS rules from all stylesheets
         const allCSS = extractAllCSSRules();
 
         // Get the section element by its ID
         const avarageData = document.getElementById("AvarageData");
         const Dropdowns = document.getElementById("Filters");
         // Create a new window for printing
         const printWindow = window.open('', '_blank');
 
         // Write the content of the section to the new window
         printWindow.document.write('<html><head><title>Avarage</title>');
         printWindow.document.write(`<style>
                                     ${allCSS}
                         </style>`);
             // Include Bootstrap stylesheet
         printWindow.document.write('<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css">');
 
         printWindow.document.write('</head><body>');
         printWindow.document.write(Dropdowns.outerHTML);
         printWindow.document.write(avarageData.outerHTML);
         printWindow.document.write(`</body></html>`);
 
         // Print the content
         printWindow.print();
     }
 </script>
 <style>
    th, td {
        border: 1px solid #dddddd;
        text-align: left;
        padding: 8px; /* Add padding here */
    }
 
    .centered-cell {
        text-align: center;
        vertical-align: middle;
    }

    /* Flexbox layout for the container */
 .dropdown-container {
     display: flex;
     flex-direction: row;
     margin-top: 1rem;
     flex-wrap: wrap;
 }
 
 /* Styling for each dropdown wrapper */
 .dropdown-wrapper {
     display: flex;
     flex-direction: column;
     align-items: flex-start;
     padding: 10px;
     border: 1px solid #ccc;
     border-radius: 5px;
     margin-right: 41px;
     background-color: #f9f9f9;
     width: 19.8rem;
 }
 
 #actions{
     display: flex;
     justify-content: space-between;
     flex-direction: column;
     align-items: flex-end;
     height: 13rem;
 }
 
 /* Styling for select elements */
 .form-select {
     width: 100%;
     padding: 8px;
     border-radius: 4px;
     border: 1px solid #ccc;
     margin-bottom: 10px;
 }
 
 /* Styling for down note links */
 .down_note a {
     color: #0066cc;
     text-decoration: none;
 }
 
 .down_note a:hover {
     text-decoration: underline;
 }
     
 .btn{
     background-color: #0075DA;
     color: white;
     border-radius: 0.3rem;
     margin: 1.5rem;
     font-size: medium;
     width: 15rem;
     margin-bottom: 2rem;
 }
 
 #CatigoryAvarage{
     display: flex;
     margin-bottom: 1rem;
     margin-top: 1rem;
     border: 1px solid #ccc;
     border-radius: 5px;
     background-color: #f9f9f9;
     flex-direction: row;
     font-variant: simplified;
     justify-content: space-around;
 }
 </style>

~[wc:admin_footer_css]

</body>
</html>
